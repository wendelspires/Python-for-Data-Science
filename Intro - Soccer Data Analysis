#importando as bibliotecas

import sqlite3
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import scale

path = ('C:\\Users\\Lucas\\Downloads\\soccer (1)\\database.sqlite')
cnx = sqlite3.connect(path)
df = pd.read_sql_query("SELECT * FROM Player_Attributes", cnx)

df.columns

#mostrar as estatísticas
df.describe().transpose()

#limpando os valores
#mostrar se tem valores nulos, qual a quantidade e em quantas colunas
df.isnull().any().any(), df.shape

#verificar quantos dados são nulos em cada coluna
df.isnull().sum(axis=0)

#pegue o primeiro numero de linhas
rows = df.shape[0]

#excluir as linhas com valores nulos
df = df.dropna()

#checar, se for True ainda há valores nulos, se for False não há mais.
df.isnull().any().any(), df.shape

#saber o número exato de linhas que foram removidas
rows - df.shape[0]

#embaralhaermos as linhas do DF para obtermos uma amostra distribuída quando exibirmos as primeiras linhas
df = df.reindex(np.random.permutation(df.index))
df.head()
df[:10][['penalties', 'overall_rating']]

#agora iremos chegar se os penaltis são correlacionados com a avaliação geral do jogador
df['overall_rating'].corr(df['penalties'])

#criando a lista de possiveis correlações
potentialFeatures = ['acceleration', 'curve', 'free_kick_accuracy','ball_control','shot_power', 'stamina']

#executar o loop para identificar qual dos atributos tem a melhor correlação com avaliação geral

for f in potentialFeatures:
    related = df['overall_rating'].corr(df[f])
    print ("%s: %f" % (f,related))
    

cols = ['potential',  'crossing', 'finishing', 'heading_accuracy',
       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',
       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',
       'agility', 'reactions', 'balance', 'shot_power', 'jumping', 'stamina',
       'strength', 'long_shots', 'aggression', 'interceptions', 'positioning',
       'vision', 'penalties', 'marking', 'standing_tackle', 'sliding_tackle',
       'gk_diving', 'gk_handling', 'gk_kicking', 'gk_positioning',
       'gk_reflexes']
       
#criando uma lista de correlação entre avaliação geral do jogador com cada coluna
correlations = [df['overall_rating'].corr(df[f]) for f in cols]
len (cols), len (correlations)

#criar a função para plotar as correlações

def plot_dataframe(df, y_label):
    color='coral'
    fig = plt.gcf()
    fig.set_size_inches(20,12)
    plt.ylabel(y_label)
    
    ax = df2.correlation.plot(linewidth=3.3, color = color)
    ax.set_xticks(df2.index)
    ax.set_xticklabels(df2.attributes, rotation=75)
    plt.show()
    
#criando um dataframe usando colunas e correlações
df2 = pd.DataFrame({'attributes': cols, 'correlation': correlations})

#plotar através da função que criamos
plot_dataframe(df2, 'Avaliação Geral dos Jogadores')

#definir as caracteristicas para agrupar os jogadores

select5features  = ['gk_kicking','potential','marking','interceptions','standing_tackle']
select5features

#gerar um novo dataframe
df_select = df[select5features].copy(deep=True)
df_select.head()

data = scale(df_select)

#definir o número de clusters
clusters = 4

#treinar o modelo
model = KMeans(init='k-means++', n_clusters=clusters, n_init=20).fit(data)

print (90*'_')
print ("\nCount of Players in each cluster")
print (90*'_')

pd.value_counts(model.labels_, sort = False)

